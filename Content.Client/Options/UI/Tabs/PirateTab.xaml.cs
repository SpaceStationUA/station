using System;
using System.Linq;
using Content.Client._Pirate.PingName;
using Content.Shared._Pirate.CCVar;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Configuration;
using Robust.Shared.IoC;
using Robust.Shared.Log;
using Robust.Shared.Maths;

namespace Content.Client.Options.UI.Tabs;

[GenerateTypedNameReferences]
public sealed partial class PirateTab : Control
{
    [Dependency] private readonly IConfigurationManager _cfg = default!;
    [Dependency] private readonly IEntitySystemManager _entitySystemManager = default!;

    private PingNameSystem? _pingNameSystem;
    private bool _soundSelectorInitialized = false;

    // Constants for custom words limit thresholds
    private const int NearCharLimitThreshold = 20;
    private const int NearWordLimitThreshold = 3;

    private PingNameSystem? PingNameSystem
    {
        get
        {
            if (_pingNameSystem != null)
                return _pingNameSystem;

            try
            {
                _pingNameSystem = _entitySystemManager?.GetEntitySystemOrNull<PingNameSystem>();
            }
            catch (Exception ex)
            {
                // EntitySystemManager might not be initialized yet
                var logger = Logger.GetSawmill("pirate.ping_name");
                logger.Warning($"Failed to initialize PingNameSystem: {ex.Message}");
                _pingNameSystem = null;
            }

            return _pingNameSystem;
        }
    }

    public PirateTab()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        PingNameEnabledCheckBox.OnToggled += OnPingNameEnabledToggled;
        PingNameSoundsCheckBox.OnToggled += OnPingNameSoundsToggled;
        PingNameSelfSoundsCheckBox.OnToggled += OnPingNameSelfSoundsToggled;

        // Sound controls
        TestSoundButton.OnPressed += OnTestSoundButtonPressed;
        PingSoundSelector.OnItemSelected += OnPingSoundSelected;

        // Custom words
        CustomWordsLineEdit.OnTextChanged += OnCustomWordsChanged;

        // Sound cooldown
        SoundCooldownSpinBox.IsValid = value => value >= 0 && value <= 300;
        SoundCooldownSpinBox.OnValueChanged += OnSoundCooldownChanged;

        // Sound volume
        SoundVolumeSlider.OnValueChanged += OnSoundVolumeChanged;

        // Color controls
        ColorSliders.OnColorChanged += OnColorSlidersChanged;
        PingNameColorReset.OnPressed += OnPingNameColorReset;

        // Apply/Reset buttons
        ApplyButton.OnPressed += OnApplyButtonPressed;
        ResetButton.OnPressed += OnResetButtonPressed;

        // Setup default sound options (fallback)
        SetupDefaultSoundSelector();
        UpdateValues();
    }

    protected override void Dispose(bool disposing)
    {
        if (disposing)
        {
            // Unsubscribe from all event handlers to prevent memory leaks
            PingNameEnabledCheckBox.OnToggled -= OnPingNameEnabledToggled;
            PingNameSoundsCheckBox.OnToggled -= OnPingNameSoundsToggled;
            PingNameSelfSoundsCheckBox.OnToggled -= OnPingNameSelfSoundsToggled;

            // Sound controls
            TestSoundButton.OnPressed -= OnTestSoundButtonPressed;
            PingSoundSelector.OnItemSelected -= OnPingSoundSelected;

            // Custom words
            CustomWordsLineEdit.OnTextChanged -= OnCustomWordsChanged;

            // Sound cooldown and volume
            SoundCooldownSpinBox.OnValueChanged -= OnSoundCooldownChanged;
            SoundVolumeSlider.OnValueChanged -= OnSoundVolumeChanged;

            // Color controls
            ColorSliders.OnColorChanged -= OnColorSlidersChanged;
            PingNameColorReset.OnPressed -= OnPingNameColorReset;

            // Apply/Reset buttons
            ApplyButton.OnPressed -= OnApplyButtonPressed;
            ResetButton.OnPressed -= OnResetButtonPressed;
        }

        base.Dispose(disposing);
    }

    private void SetupDefaultSoundSelector()
    {
        // Add default sound options as fallback - matching the real system sounds
        var defaultSounds = new[]
        {
            ("ping1", "Cargo Ping"),
            ("ping2", "Simple Beep"),
            ("ping3", "Chime"),
            ("ping4", "Ding"),
            ("ping5", "Bell Chime"),
            ("ping6", "Item Beep"),
            ("ping7", "Tech Confirm"),
            ("ping8", "Double Beep"),
            ("ping9", "Desk Bell"),
            ("ping10", "IPC Ding")
        };

        PingSoundSelector.Clear();
        var soundIndex = 0;
        foreach (var (soundId, soundName) in defaultSounds)
        {
            PingSoundSelector.AddItem(soundName, soundIndex);
            PingSoundSelector.SetItemMetadata(soundIndex, soundId);
            soundIndex++;
        }
    }

    private void SetupSoundSelector()
    {
        if (_soundSelectorInitialized)
            return;

        if (PingNameSystem == null)
            return; // Keep default sounds

        try
        {
            var availableSounds = PingNameSystem.GetAvailablePingSounds();

            // Clear default sounds and add system sounds
            PingSoundSelector.Clear();
            var soundIndex = 0;
            foreach (var (soundId, soundName) in availableSounds)
            {
                PingSoundSelector.AddItem(soundName, soundIndex);
                PingSoundSelector.SetItemMetadata(soundIndex, soundId);
                soundIndex++;
            }

            _soundSelectorInitialized = true;
        }
        catch (Exception ex)
        {
            // If there's any error, keep the default sounds
            var logger = Logger.GetSawmill("pirate.ping_name");
            logger.Warning($"Failed to setup sound selector: {ex.Message}");
            return;
        }
    }

    private void UpdateValues()
    {
        // Try to setup sound selector with real system sounds if available
        // Only attempt this if we're likely in a game context
        if (_entitySystemManager != null)
        {
            try
            {
                SetupSoundSelector();
            }
            catch (Exception ex)
            {
                // If setup fails, keep using default sounds
                var logger = Logger.GetSawmill("pirate.ping_name");
                logger.Warning($"Failed to setup sound selector in UpdateValues: {ex.Message}");
            }
        }

        PingNameEnabledCheckBox.Pressed = _cfg.GetCVar(PirateCVars.PingNameEnabled);
        PingNameSoundsCheckBox.Pressed = _cfg.GetCVar(PirateCVars.PingNameSoundsEnabled);
        PingNameSelfSoundsCheckBox.Pressed = _cfg.GetCVar(PirateCVars.PingNameSelfSoundsEnabled);

        // Update sound selector
        var currentSoundId = _cfg.GetCVar(PirateCVars.PingNameSoundId);
        for (var i = 0; i < PingSoundSelector.ItemCount; i++)
        {
            if (PingSoundSelector.GetItemMetadata(i)?.ToString() == currentSoundId)
            {
                PingSoundSelector.SelectId(i);
                break;
            }
        }

        // Update custom words
        CustomWordsLineEdit.Text = _cfg.GetCVar(PirateCVars.PingNameCustomWords);
        UpdateCustomWordsLimit();

        // Update sound cooldown
        SoundCooldownSpinBox.Value = _cfg.GetCVar(PirateCVars.PingNameSoundCooldown);

        // Update sound volume
        var volume = _cfg.GetCVar(PirateCVars.PingNameSoundVolume);
        SoundVolumeSlider.Value = volume;
        var volumePercent = (int)(volume * 100);
        SoundVolumeLabel.Text = $"{volumePercent}%";

        var colorHex = _cfg.GetCVar(PirateCVars.PingNameColor);
        var color = Color.TryFromHex(colorHex) ?? Color.Yellow;
        ColorSliders.Color = color;

        UpdateColorPreview();
        UpdateChanges();
    }

    private void UpdateColorPreview()
    {
        var currentColor = ColorSliders.Color;
        PingNameColorPreview.Modulate = currentColor;
    }

    private void OnPingNameEnabledToggled(BaseButton.ButtonToggledEventArgs args)
    {
        UpdateChanges();
    }

    private void OnPingNameSoundsToggled(BaseButton.ButtonToggledEventArgs args)
    {
        UpdateChanges();
    }

    private void OnPingNameSelfSoundsToggled(BaseButton.ButtonToggledEventArgs args)
    {
        UpdateChanges();
    }

    private void OnPingSoundSelected(OptionButton.ItemSelectedEventArgs args)
    {
        // Update the button text to show the selected item
        PingSoundSelector.SelectId(args.Id);
        UpdateChanges();
    }

    private void OnTestSoundButtonPressed(BaseButton.ButtonEventArgs args)
    {
        // Try to setup sound selector if not already done
        if (_entitySystemManager != null)
        {
            try
            {
                SetupSoundSelector();
            }
            catch (Exception ex)
            {
                // If setup fails, continue with default sounds
                var logger = Logger.GetSawmill("pirate.ping_name");
                logger.Warning($"Failed to setup sound selector in test button: {ex.Message}");
            }
        }

        // Get the correct sound ID from the selected item
        var soundId = "ping1"; // default fallback
        if (PingSoundSelector.SelectedId >= 0 && PingSoundSelector.SelectedId < PingSoundSelector.ItemCount)
        {
            soundId = PingSoundSelector.GetItemMetadata(PingSoundSelector.SelectedId)?.ToString() ?? "ping1";
        }

        if (string.IsNullOrEmpty(soundId))
            return;

        // Try to use the system if available, otherwise just show a message
        if (PingNameSystem != null)
        {
            try
            {
                PingNameSystem.PlayTestPingSound(soundId);
            }
            catch (Exception ex)
            {
                // System might not be fully initialized
                var logger = Logger.GetSawmill("pirate.ping_name");
                logger.Warning($"Failed to play test ping sound: {ex.Message}");
            }
        }
        // If system is not available, we can't play the sound but at least we don't crash
    }

    private void OnCustomWordsChanged(LineEdit.LineEditEventArgs args)
    {
        UpdateCustomWordsLimit();
        UpdateChanges();
    }

    private void UpdateCustomWordsLimit()
    {
        var maxLength = _cfg.GetCVar(PirateCVars.PingNameCustomWordsMaxLength);
        var maxCount = _cfg.GetCVar(PirateCVars.PingNameCustomWordsMaxCount);
        var currentText = CustomWordsLineEdit.Text ?? "";
        var currentLength = currentText.Length;
        var remaining = Math.Max(0, maxLength - currentLength);

        // Count words
        var words = currentText.Split(new[] { ' ', '\t', '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries);
        var wordCount = words.Length;

        // Update the limit label with both character and word limits
        CustomWordsLimitLabel.Text = $"Залишилось символів: {remaining}/{maxLength} | Слів: {wordCount}/{maxCount}";

        // Change color based on remaining characters or word count
        var isOverCharLimit = remaining == 0;
        var isOverWordLimit = wordCount > maxCount;
        var isNearCharLimit = remaining < NearCharLimitThreshold;
        var isNearWordLimit = wordCount > maxCount - NearWordLimitThreshold;

        if (isOverCharLimit || isOverWordLimit)
        {
            CustomWordsLimitLabel.FontColorOverride = Color.Red;
        }
        else if (isNearCharLimit || isNearWordLimit)
        {
            CustomWordsLimitLabel.FontColorOverride = Color.Orange;
        }
        else
        {
            CustomWordsLimitLabel.FontColorOverride = null; // Use default color
        }

        // Enforce the character limit by truncating if necessary
        if (currentLength > maxLength)
        {
            CustomWordsLineEdit.Text = currentText[..maxLength];
        }

        // Enforce word limit by removing excess words
        if (wordCount > maxCount)
        {
            var allowedWords = words.Take(maxCount);
            CustomWordsLineEdit.Text = string.Join(" ", allowedWords);
        }
    }

    private void OnSoundCooldownChanged(FloatSpinBox.FloatSpinBoxEventArgs args)
    {
        UpdateChanges();
    }

    private void OnSoundVolumeChanged(Robust.Client.UserInterface.Controls.Range _)
    {
        // Update volume label
        var volumePercent = (int)(SoundVolumeSlider.Value * 100);
        SoundVolumeLabel.Text = $"{volumePercent}%";

        UpdateChanges();
    }

    private void OnColorSlidersChanged(Color color)
    {
        UpdateColorPreview();
        UpdateChanges();
    }

    private void OnPingNameColorReset(BaseButton.ButtonEventArgs args)
    {
        var defaultColor = "#FFFF00"; // Yellow

        // Update sliders to show the default color
        var color = Color.TryFromHex(defaultColor) ?? Color.Yellow;
        ColorSliders.Color = color;

        UpdateColorPreview();
        UpdateChanges();
    }

    private void OnApplyButtonPressed(BaseButton.ButtonEventArgs args)
    {
        _cfg.SetCVar(PirateCVars.PingNameEnabled, PingNameEnabledCheckBox.Pressed);
        _cfg.SetCVar(PirateCVars.PingNameSoundsEnabled, PingNameSoundsCheckBox.Pressed);
        _cfg.SetCVar(PirateCVars.PingNameSelfSoundsEnabled, PingNameSelfSoundsCheckBox.Pressed);

        // Get the correct sound ID from the selected item
        var selectedSoundId = "ping1"; // default fallback
        if (PingSoundSelector.SelectedId >= 0 && PingSoundSelector.SelectedId < PingSoundSelector.ItemCount)
        {
            selectedSoundId = PingSoundSelector.GetItemMetadata(PingSoundSelector.SelectedId)?.ToString() ?? "ping1";
        }
        _cfg.SetCVar(PirateCVars.PingNameSoundId, selectedSoundId);

        _cfg.SetCVar(PirateCVars.PingNameCustomWords, CustomWordsLineEdit.Text);
        _cfg.SetCVar(PirateCVars.PingNameSoundCooldown, SoundCooldownSpinBox.Value);
        _cfg.SetCVar(PirateCVars.PingNameSoundVolume, SoundVolumeSlider.Value);
        _cfg.SetCVar(PirateCVars.PingNameColor, ColorSliders.Color.ToHex());

        // Log sound selection if not default
        var currentSoundId = _cfg.GetCVar(PirateCVars.PingNameSoundId);
        if (currentSoundId != "ping1")
        {
            Logger.GetSawmill("pirate.ping_name").Info($"User selected non-default ping sound: {currentSoundId}");
        }

        _cfg.SaveToFile();
        UpdateChanges();
    }

    private void OnResetButtonPressed(BaseButton.ButtonEventArgs args)
    {
        Reset();
    }

    private void Reset()
    {
        PingNameEnabledCheckBox.Pressed = PirateCVars.PingNameEnabled.DefaultValue;
        PingNameSoundsCheckBox.Pressed = PirateCVars.PingNameSoundsEnabled.DefaultValue;
        PingNameSelfSoundsCheckBox.Pressed = PirateCVars.PingNameSelfSoundsEnabled.DefaultValue;

        // Reset sound selector to default
        var defaultSoundId = PirateCVars.PingNameSoundId.DefaultValue;
        for (var i = 0; i < PingSoundSelector.ItemCount; i++)
        {
            if (PingSoundSelector.GetItemMetadata(i)?.ToString() == defaultSoundId)
            {
                PingSoundSelector.SelectId(i);
                break;
            }
        }

        // Reset custom words
        CustomWordsLineEdit.Text = PirateCVars.PingNameCustomWords.DefaultValue;
        UpdateCustomWordsLimit();

        // Reset sound cooldown
        SoundCooldownSpinBox.Value = PirateCVars.PingNameSoundCooldown.DefaultValue;

        // Reset sound volume
        var defaultVolume = PirateCVars.PingNameSoundVolume.DefaultValue;
        SoundVolumeSlider.Value = defaultVolume;
        var volumePercent = (int)(defaultVolume * 100);
        SoundVolumeLabel.Text = $"{volumePercent}%";

        var defaultColor = Color.TryFromHex(PirateCVars.PingNameColor.DefaultValue) ?? Color.Yellow;
        ColorSliders.Color = defaultColor;

        UpdateColorPreview();
        UpdateChanges();
    }

    private void UpdateChanges()
    {
        // Get the correct sound ID from the selected item
        var currentSoundId = "ping1"; // default fallback
        if (PingSoundSelector.SelectedId >= 0 && PingSoundSelector.SelectedId < PingSoundSelector.ItemCount)
        {
            currentSoundId = PingSoundSelector.GetItemMetadata(PingSoundSelector.SelectedId)?.ToString() ?? "ping1";
        }

        var isPingNameEnabledSame = PingNameEnabledCheckBox.Pressed == _cfg.GetCVar(PirateCVars.PingNameEnabled);
        var isPingNameSoundsSame = PingNameSoundsCheckBox.Pressed == _cfg.GetCVar(PirateCVars.PingNameSoundsEnabled);
        var isPingNameSelfSoundsSame = PingNameSelfSoundsCheckBox.Pressed == _cfg.GetCVar(PirateCVars.PingNameSelfSoundsEnabled);
        var isSoundIdSame = currentSoundId == _cfg.GetCVar(PirateCVars.PingNameSoundId);
        var isCustomWordsSame = CustomWordsLineEdit.Text == _cfg.GetCVar(PirateCVars.PingNameCustomWords);
        var isSoundCooldownSame = Math.Abs(SoundCooldownSpinBox.Value - _cfg.GetCVar(PirateCVars.PingNameSoundCooldown)) < 0.01f;
        var isSoundVolumeSame = Math.Abs(SoundVolumeSlider.Value - _cfg.GetCVar(PirateCVars.PingNameSoundVolume)) < 0.01f;
        var isColorSame = ColorSliders.Color.ToHex() == _cfg.GetCVar(PirateCVars.PingNameColor);

        var isEverythingSame = isPingNameEnabledSame && isPingNameSoundsSame && isPingNameSelfSoundsSame &&
                              isSoundIdSame && isCustomWordsSame && isSoundCooldownSame && isSoundVolumeSame && isColorSame;

        ApplyButton.Disabled = isEverythingSame;
        ResetButton.Disabled = isEverythingSame;
    }
}












